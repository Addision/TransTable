#ifndef __CTABLE_%(class_upper)s__HPP__
#define __CTABLE_%(class_upper)s__HPP__

#include "Common/CommonDefines.hpp"
#include "Common/JsonConfig.hpp"

namespace CrossGate
{

class CTable%(class_name)s : public com::iface::Singleton<CTable%(class_name)s>
{
public:
	struct Row
	{
	%(row_fields)s
	};
	DECLARE_SINGLETON_DEFAULT(CTable%(class_name)s)
	using ptr_row_type = std::shared_ptr<Row>;
	using map_table_type = std::unordered_map<%(key_type)s, ptr_row_type>;
	using vec_type = std::vector<%(key_type)s>;	
private:
	vec_type m_keys;
	map_table_type	m_table;
public:
	const Row* GetRow(const %(key_type)s& key)
	{
		map_table_type::iterator it = m_table.find(key);
		if (it == m_table.end())
		{
			return nullptr;
		}
		return it->second.get();
	}

	bool HasRow(const %(key_type)s& key)
	{
		return m_table.find(key) != m_table.end();
	}

	const vec_type& Keys() const
	{
		return m_keys;
	}

	const map_table_type& table() const
	{
		return m_table;
	}

	void Load()
	{
		LoadJson("%(class_name)s.json");
	}

	void ReLoad()
	{
		ReLoadJson("%(class_name)s.json");
	}

	void LoadJson(const std::string& jsonFile)
	{
		auto pInstance = JsonConfig::GetInstance();
		std::string loadfile = std::string(TABLE_PATH).append(jsonFile.c_str());
		if (!pInstance->Load(loadfile.c_str()))
		{
			Clog::error_throw(Utility::errors::logic,"load table %(class_name)s error");
		}

		for (auto it = pInstance->m_root.begin(); it != pInstance->m_root.end(); ++it)
		{
			try
			{
				auto& r = (*it);
				ptr_row_type pRow(new Row);
				Row& row = *pRow;
%(json_logic)s
				m_table.emplace(row.id, pRow);
				m_keys.emplace_back(row.id);
			}
			catch (std::exception const& e)
			{
				Clog::error_throw(Utility::errors::logic,"read table Map error,%%s", e.what());
			}
		}
	}

	void ReLoadJson(const std::string& jsonFile)
	{
		m_keys.clear();
		m_table.clear();
		LoadJson(jsonFile);
	}
};
	
}
#endif